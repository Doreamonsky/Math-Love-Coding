from scipy import optimize
import numpy as np


# 代码文档： https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html

# c = [2, 3, -5]

# A = [[-2, 5, -1], [1, 3, 1]]

# b = [-10, 12]

# Aeq = [[1, 1, 1]]  # Caution! Aeq is a matrix

# beq = [7]

# res = optimize.linprog(c, A_ub=A, b_ub=b, A_eq=Aeq, b_eq=beq,
#                        bounds=[(0, None), (0, None), (0, None)])

# Linear programming solves problems of the following form:
# Ax<=b
# Aeq * x = beq
# lb<=x<=ub bounds 来限制范围

# 例 1  某机床厂生产甲、乙两种机床，每台销售后的利润分别为 4000 元与 3000 元。
# linprog 默认是求最小值，求最大值要把 c 反号
c = np.array([4, 3])
A = [[2, 1], [1, 1]]
b = [10, 8]

res = optimize.linprog(-c, A_ub=A, b_ub=b, bounds=[(0, None), (0, 7)])

print(res)


# 例2  运输问题（产销平衡）
# 某商品有m个产地，n个销地。各产地的产量分别是A1，A2......Am，各销地的需求量分别是B1，B2......Bn。若商品从i产地运输到j销地其单位运价为Cij，请问该如何调运才能使总运费最省？

c = [3, 11, 3, 10, 1, 9, 2, 8, 7, 4, 10, 5]

Aeq = [
    [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
]

beq = [7, 4, 9, 3, 6, 5, 6]

res = optimize.linprog(
    c,
    A_eq=Aeq,
    b_eq=beq,
    bounds=[
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None)
    ]
)

print("Resources \n {0}".format(res))

# 有四个工人，要指派他们分别完成 4 项工作，每人做各项工作所消耗的时间如 表 3。
# 这种0-1问题，分配任务可化为运输问题

c = np.array([15, 18, 21, 24, 19, 23, 22, 18,
              26, 17, 16, 19, 19, 21, 23, 17])

Aeq = [
    [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
]

beq = [
    1, 1, 1, 1, 1, 1, 1, 1
]

res = optimize.linprog(
    c,
    A_eq=Aeq,
    b_eq=beq,
    bounds=[
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None),
        (0, None)
    ]
)

print("People \n {0}".format(res))

# 9．一架货机有三个货舱：前舱、中仓和后舱。
# 三个货舱所能装载的货物的最大重 量和体积有限制
# 如表 5 所示。并且为了飞机的平衡，三个货舱装载的货物重量必须与其 最大的容许量成比例。
# 假设：
# （1）每种货物可以无限细分；
# （2）每种货物可以分布在一个或者多个货舱内；
# （3）不同的货物可以放在同一个货舱内，并且可以保证不留空隙。
# 问应如何装运，使货机飞行利润最大？

c = np.array([3100, 3100, 3100, 3800, 3800, 3800, 3500, 3500, 3500, 2850, 2850, 2850])

A = [
    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],
    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
    [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
    [480, 0, 0, 650, 0, 0, 580, 0, 0, 390, 0, 0],
    [0, 480, 0, 0, 650, 0, 0, 580, 0, 0, 390, 0],
    [0, 0, 480, 0, 0, 650, 0, 0, 580, 0, 0, 390],
]


b = [
    18, 15, 23, 12, 10, 16, 8, 6800, 8700, 5300
]

res = optimize.linprog(-c, A, b,bounds=[(0,18),(0,18),(0,18),(0,15),(0,15),(0,15),(0,23),(0,23),(0,23),(0,12),(0,12),(0,12)])

print("Eco: \n {0}".format(res))
